
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077d  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062e  00000000  00000000  000009ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000430  00000000  00000000  0000101b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000220  00000000  00000000  00001856  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001a76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_12>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  64:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_12>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <avr/io.h>
#include "spi_slave.h"
ISR(SPI_STC_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	
	char data =SPDR;
  78:	8f b1       	in	r24, 0x0f	; 15
	if (data=='a')
  7a:	81 36       	cpi	r24, 0x61	; 97
  7c:	51 f4       	brne	.+20     	; 0x92 <__vector_12+0x26>
	{
		PORTC|=(1<<0);
  7e:	85 b3       	in	r24, 0x15	; 21
  80:	81 60       	ori	r24, 0x01	; 1
  82:	85 bb       	out	0x15, r24	; 21
		PORTC&=~(1<<1);
  84:	85 b3       	in	r24, 0x15	; 21
  86:	8d 7f       	andi	r24, 0xFD	; 253
  88:	85 bb       	out	0x15, r24	; 21
		PORTC&=~(1<<2);
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	8b 7f       	andi	r24, 0xFB	; 251
  8e:	85 bb       	out	0x15, r24	; 21
  90:	17 c0       	rjmp	.+46     	; 0xc0 <__vector_12+0x54>
		
	}
	else if (data=='b')
  92:	82 36       	cpi	r24, 0x62	; 98
  94:	51 f4       	brne	.+20     	; 0xaa <__vector_12+0x3e>
	{
		PORTC&=~(1<<0);
  96:	85 b3       	in	r24, 0x15	; 21
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	85 bb       	out	0x15, r24	; 21
		PORTC|=(1<<1);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	85 bb       	out	0x15, r24	; 21
		PORTC&=~(1<<2);
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	0b c0       	rjmp	.+22     	; 0xc0 <__vector_12+0x54>
	}
	else if (data=='c')
  aa:	83 36       	cpi	r24, 0x63	; 99
  ac:	49 f4       	brne	.+18     	; 0xc0 <__vector_12+0x54>
	{
		PORTC&=~(1<<0);
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	85 bb       	out	0x15, r24	; 21
		PORTC&=~(1<<1);
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 bb       	out	0x15, r24	; 21
		PORTC|=(1<<2);
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	85 bb       	out	0x15, r24	; 21
	}

}
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:


int main(void)
{
	DDRC|=(1<<0)|(1<<1)|(1<<2);
  cc:	84 b3       	in	r24, 0x14	; 20
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	84 bb       	out	0x14, r24	; 20
	initial_spi(4,slave,1);
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	0e 94 8e 00 	call	0x11c	; 0x11c <initial_spi>
	recive();
  dc:	0e 94 8a 00 	call	0x114	; 0x114 <recive>
	
	
    sei();// gloable interrupt
  e0:	78 94       	sei
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x16>

000000e4 <master_or_slave>:
void transmiter(char data)
{
	
	SPDR=data;
	while(!(SPSR&(1<<SPIF)));
}
  e4:	88 23       	and	r24, r24
  e6:	31 f0       	breq	.+12     	; 0xf4 <master_or_slave+0x10>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	39 f4       	brne	.+14     	; 0xfa <master_or_slave+0x16>
  ec:	8d b1       	in	r24, 0x0d	; 13
  ee:	80 61       	ori	r24, 0x10	; 16
  f0:	8d b9       	out	0x0d, r24	; 13
  f2:	08 95       	ret
  f4:	8d b1       	in	r24, 0x0d	; 13
  f6:	8f 7e       	andi	r24, 0xEF	; 239
  f8:	8d b9       	out	0x0d, r24	; 13
  fa:	08 95       	ret

000000fc <data_order>:
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	21 f4       	brne	.+8      	; 0x108 <data_order+0xc>
 100:	8d b1       	in	r24, 0x0d	; 13
 102:	8f 7d       	andi	r24, 0xDF	; 223
 104:	8d b9       	out	0x0d, r24	; 13
 106:	08 95       	ret
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	19 f4       	brne	.+6      	; 0x112 <data_order+0x16>
 10c:	8d b1       	in	r24, 0x0d	; 13
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	8d b9       	out	0x0d, r24	; 13
 112:	08 95       	ret

00000114 <recive>:
void recive(void)
{
	
	SPCR|=(1<<SPIE); // ENABLE INTERRUPT
 114:	8d b1       	in	r24, 0x0d	; 13
 116:	80 68       	ori	r24, 0x80	; 128
 118:	8d b9       	out	0x0d, r24	; 13
 11a:	08 95       	ret

0000011c <initial_spi>:
}
void initial_spi(char frq,char mode,char send)
{
 11c:	cf 93       	push	r28
 11e:	86 2f       	mov	r24, r22
 120:	c4 2f       	mov	r28, r20
	DDRB|=(1<<6);
 122:	97 b3       	in	r25, 0x17	; 23
 124:	90 64       	ori	r25, 0x40	; 64
 126:	97 bb       	out	0x17, r25	; 23
	SPCR|=(1<<SPE);
 128:	9d b1       	in	r25, 0x0d	; 13
 12a:	90 64       	ori	r25, 0x40	; 64
 12c:	9d b9       	out	0x0d, r25	; 13
	master_or_slave(mode);
 12e:	0e 94 72 00 	call	0xe4	; 0xe4 <master_or_slave>
	data_order(send);
 132:	8c 2f       	mov	r24, r28
 134:	0e 94 7e 00 	call	0xfc	; 0xfc <data_order>
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
